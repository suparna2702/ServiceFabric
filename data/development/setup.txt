=== Description:

The development build has three modes:

 - test: Compile and run unit tests.

 - itest: Compile and run unit tests, then deploy to JBoss, run integration tests, undeploy.

 - deploy: Compile and run unit tests, then deploy to JBoss (with a name different from itest)


Each of these modes should use a different db (but they can point to the same one if you want), default db names:

 - similan_test: full of repeated and probably invalid data generated by unit tests and never reused. This db can be dropped and recreated at any time. Hibernate updates this db automatically (but will drop and create it in every build in the future)

 - similan_itest: with data created by integration tests, this data should be valid but repeated. This db can be dropped and recreated any at time. Hibernate updates this db automatically (but in the future the build should drop, create the base revision db and run a developer-writen update script)

 - similan_deploy: with user generated data. that should be valid most of the time. You would probably like to keep this db. Hibernate will update this db automatically (but in the future it should only validate, and should be updated manually by the developer, using it as a sandbox to help him write the script what will be needed for the itest)

Note that both itest and deploy modes will also run the unit tests before their mode-specific tasks, however, while running the unit tests the test db will be used, no mater what mode are we building with.

=== Databases:

1. Create the databases similan_test, similan_itest and similan_deploy.

If you have a db with currently populated data that you want to keep, you can rename it to similan_deploy, by exporting and reimporting a mysql dump:
 - mysqldump -u root -p -v similan_old_db_name > dump.sql
 - mysql -u root -p -v similan_deploy < dump.sql

After you are sure it worked, you can drop your old db.

You could also use other db names, if you do that, remember to change them in <jboss-home>/standalone/configuration/standalone.xml and <m2-repo>/settings.xml in the following steps.

2. Run <git-repo>/data/configuration/data-configuration.sql in each one of the dbs.

Those settings are an example, update them as appropiate in your environment.
Please note that you have to will need to set a different value for domain_graphDatabaseService.path in each of your dbs, for example:
 - In test the value could be: /var/similan/neo4j/db/similan_test
 - In itest the value could be: /var/similan/neo4j/db/similan_itest
 - In deploy the value could be: /var/similan/neo4j/db/similan_deploy

=== JBoss:

1. Download and install Jboss 7.1.1 Final

2. Unzip <git-repo>/data/development/jboss-as-7.1.1.Final-config-patch.zip into your <jboss-home>

It will create and admin user: admin/1234 that you can use in the admin console http://localhost:9990/console/App.html

Edit <jboss-home>/standalone/configuration/standalone.xml, and update datasources "java:jboss/datasources/similan/deploy" and "java:jboss/datasources/similan/itest" db url, user and password to the proper ones in your environment.

If you are using an existing JBoss instalation, you might want to:
 - skip overwriting domain/configuration/mgmt-users.properties and standalone/configuration/mgmt-users.properties (to avoid deleting your admin users and creating admin/1234)
 - skip overwriting and manually merging standalone/configuration/standalone.xml you only need to copy the datasources "java:jboss/datasources/similan/deploy" and "java:jboss/datasources/similan/itest" and the driver "mysql".

3. Start JBoss by running <jboss-home>/bin/standalone.sh (Linux) or <jboss-home>/bin/standalone.bat (Windows) and check the logs for errors.

=== Maven:
1. Copy <git-repo>/data/configuration/settings.xml to <m2-repo>/settings.xml

If you already have that file, merge the profile contained there, be sure to have it as an activeProfile.
Note that similan.test.jpa.url should point to the test db. Change the db url, user and password to the proper ones in your environment.

2. Run each of the build modes to look for errors. Rembember to start JBoss first.

 - test build mode: at <git-repo>: mvn clean install -Dsimilan.build.action=test -Dsimilan.build.modifier=test

 - itest build mode: at <git-repo>: mvn clean install -Dsimilan.build.action=itest -Dsimilan.build.modifier=itest

 - deploy build mode: here, remember that currently admin and portal cannot coexist, so you have to deploy them alternatively.
   - portal: at <git-repo>: mvn clean install -Dsimilan.build.action=deploy.portal -Dsimilan.build.modifier=deploy
   - admin: at <git-repo>: mvn clean install -Dsimilan.build.action=deploy.admin -Dsimilan.build.modifier=deploy

 - undeploy: since portal and admin cannot be deployed at the same time at the present, you'll have to undeploy them either using the JBoss admin console (http://localhost:9990/console/App.html) or by running:
   - portal: at <git-repo>/portal-application: jboss-as:undeploy -Dsimilan.build.action=deploy.portal -Dsimilan.build.modifier=deploy
   - admin: at <git-repo>/admin-application: jboss-as:undeploy -Dsimilan.build.action=deploy.admin -Dsimilan.build.modifier=deploy

=== Eclipse:
To ease the verbose Maven commands (and to have the enviroment ready for debugging) you could import a set of common launch configurations:

1. Close Eclipse

2. Copy <git-repo>/data/development/.metadata to <eclipse-workspace>/.metadata and let it merge the files

3. Open Eclipse

4. Go to menu Window > Preferences, in the preferences window go to Run/Debug > String Substitutions and there add a new variable named "maven_home" pointing to you <maven-home> (not to the bin directory, to the actual home)

5. Click the External Tools dropdown button in the Eclipse toolbar, then External Tools Configurations. You should be able to see a set of common tasks including:
 - test
 - itest
 - portal-deploy
 - portal-undeploy
 - admin-deploy
 - admin-undeploy
 - eclipse-eclipse (to update your Eclipse classpath after modifying your poms)
 
6. Click the Debug As dropdown button in the Eclipse toolbar, then Debug Configurations. You will see:
 - debug-maven: to connect to debug the Maven build itself.
 - debug-tests: to connect to debug the Maven run tests (by default they run in a separte JVM, not the same one used to build)
 - debug-jboss: to connect to debug the application running directly in JBoss

=== Issues
- JBoss PermGen space OutOfMemoryError: After several deploys you'll run out of space to allocate the class/method/code definitions which is placed exclusively in a special area of the memory called PermGen. Once loaded, these definitions are never released. So new version of the classes brough by new deployments (yes, even of the same app) won't find room after a while, because old defs are still there. No fix for this, restart JBoss.
